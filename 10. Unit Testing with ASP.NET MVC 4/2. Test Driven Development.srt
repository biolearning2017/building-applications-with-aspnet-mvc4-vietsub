1
00:00:02,000 --> 00:00:05,000
To give you some idea of the test-driven development flow, we're going to step away

2
00:00:05,000 --> 00:00:09,000
from the web project for a bit and focus on the test project.

3
00:00:09,000 --> 00:00:13,000
If you remember, in the first module of this course when we created the application,

4
00:00:13,000 --> 00:00:15,000
we also created a unit testing project.

5
00:00:15,000 --> 00:00:20,000
We can run tests inside of this project using the "Test Menu"

6
00:00:20,000 --> 00:00:23,000
or by using the "Control-R A" shortcut key.

7
00:00:23,000 --> 00:00:27,000
"Visual Studio" will find all of the test classes inside this project

8
00:00:27,000 --> 00:00:29,000
and run the test methods.

9
00:00:29,000 --> 00:00:33,000
We currently have a failing test, and if you look at the problem here by clicking

10
00:00:33,000 --> 00:00:36,000
on the test, and down here at the bottom of the test explorer,

11
00:00:36,000 --> 00:00:39,000
it will show you the exception that happened.

12
00:00:39,000 --> 00:00:44,000
You'll see there was an exception because the "Home Controller" tries to talk to the database,

13
00:00:44,000 --> 00:00:46,000
but it doesn't find the connection string that it's looking for,

14
00:00:46,000 --> 00:00:50,000
and this test is envoking the "Home Controller Index Action".

15
00:00:50,000 --> 00:00:52,000
We have that connection string defined in the web application,

16
00:00:52,000 --> 00:00:56,000
so the web application works just fine when we view the app with a browser,

17
00:00:56,000 --> 00:00:59,000
but the tests are failing because we haven't configured this properly yet.

18
00:00:59,000 --> 00:01:02,000
We're going to defer this problem and come back later.

19
00:01:02,000 --> 00:01:06,000
And I'll show you a couple approaches you can use for testing controllers that need data.

20
00:01:06,000 --> 00:01:11,000
For right now, I just want to focus on what it would look like to try test-driven development.

21
00:01:11,000 --> 00:01:15,000
I encourage you to try test-driven development, and write unit tests

22
00:01:15,000 --> 00:01:16,000
because I personally have found them

23
00:01:16,000 --> 00:01:20,000
to be the most beneficial practice I have ever followed in my career.

24
00:01:20,000 --> 00:01:24,000
And the one secret to this is that tests are just as much about design

25
00:01:24,000 --> 00:01:26,000
as they are about insuring quality.

26
00:01:26,000 --> 00:01:28,000
Let me show you what I mean.

27
00:01:28,000 --> 00:01:30,000
To get ready to implement this feature,

28
00:01:30,000 --> 00:01:34,000
I've already added a "Features" folder into my "Unit Tests" project.

29
00:01:34,000 --> 00:01:41,000
All I need to do is right-click this and say "Add a Unit Test".

30
00:01:41,000 --> 00:01:43,000
It's called "Unit Test One.cs".

31
00:01:43,000 --> 00:01:45,000
We can change the name later.

32
00:01:45,000 --> 00:01:50,000
For now, I'm going to paste in some comments that I jotted down as I was talking

33
00:01:50,000 --> 00:01:52,000
to the business people about this feature.

34
00:01:52,000 --> 00:01:55,000
It turns out that they want to try at least two different approaches

35
00:01:55,000 --> 00:01:57,000
and see which one works the best.

36
00:01:57,000 --> 00:02:01,000
One approach to calculating the overall rating for a restaurant would be

37
00:02:01,000 --> 00:02:05,000
to just take the simple average of the rating property for the last N number of reviews

38
00:02:05,000 --> 00:02:08,000
where N is something an administrator can configure,

39
00:02:08,000 --> 00:02:11,000
so it might be the last 10 reviews or the last 100 reviews.

40
00:02:11,000 --> 00:02:13,000
Another approach would be to compute a weighted mean

41
00:02:13,000 --> 00:02:16,000
where the most recent reviews are more heavily weighted.

42
00:02:16,000 --> 00:02:18,000
That would benefit a restaurant that is improving

43
00:02:18,000 --> 00:02:20,000
after a bad start and getting better reviews.

44
00:02:20,000 --> 00:02:24,000
It might also benefit a customer who is thinking about going to a restaurant that used

45
00:02:24,000 --> 00:02:27,000
to have great quality, but is now on the decline.

46
00:02:27,000 --> 00:02:30,000
I like starting with some comments inside of my test file,

47
00:02:30,000 --> 00:02:32,000
just so I can refer to them and think about them.

48
00:02:32,000 --> 00:02:35,000
They usually describe the business scenario that I'm trying to solve.

49
00:02:35,000 --> 00:02:39,000
I don't use the TDD approach for all of the code I write, but this represents the type

50
00:02:39,000 --> 00:02:42,000
of scenario where I probably would use TDD.

51
00:02:42,000 --> 00:02:46,000
I'm not sure how to design this feature, and test-driven development is a great design tool.

52
00:02:46,000 --> 00:02:51,000
I can delete the comments when I'm done, but for right now it provides me something concrete

53
00:02:51,000 --> 00:02:55,000
that I can look at and remember the goal, and I can start thinking about a solution and thinking

54
00:02:55,000 --> 00:02:58,000
about how I'd implement this feature.

55
00:02:58,000 --> 00:03:00,000
"Visual Studio" has already given me a test class.

56
00:03:00,000 --> 00:03:03,000
It has a method inside of it, "Test Method One".

57
00:03:03,000 --> 00:03:07,000
The first thing you might try to do is give this class and method a more descriptive name,

58
00:03:07,000 --> 00:03:10,000
but don't get too caught up on naming right away.

59
00:03:10,000 --> 00:03:12,000
My idea is that I want to use "Visual Studio" like I used

60
00:03:12,000 --> 00:03:15,000
to use a whiteboard before I started test-driven development.

61
00:03:15,000 --> 00:03:19,000
Someone would give me a software requirement, and I'd go to the whiteboard and start trying

62
00:03:19,000 --> 00:03:23,000
to diagram out some classes and methods that I think I would need.

63
00:03:23,000 --> 00:03:27,000
I'm going to do that in "Visual Studio" instead because "Visual Studio" gives me a compiler,

64
00:03:27,000 --> 00:03:30,000
and I can use tests to validate that the code works.

65
00:03:30,000 --> 00:03:32,000
And since I'm not sure what direction I'm going just yet,

66
00:03:32,000 --> 00:03:34,000
there's no need to spend time thinking of names.

67
00:03:34,000 --> 00:03:38,000
Once I've figured that out, we can rename things later.

68
00:03:38,000 --> 00:03:42,000
I do know I'm going to be working with some data, some restaurant data,

69
00:03:42,000 --> 00:03:44,000
and we already have that restaurant class defined.

70
00:03:44,000 --> 00:03:48,000
I just need to pull in the name space "Ode to Food.models",

71
00:03:48,000 --> 00:03:54,000
and my restaurant will have some reviews associated with it, and I need to bring

72
00:03:54,000 --> 00:03:58,000
in the name space for "List of T", which is "system.collections.generic".

73
00:03:58,000 --> 00:04:02,000
And once I have that, I'm ready to add some reviews to this restaurant.

74
00:04:02,000 --> 00:04:07,000
I'll just add a single review, and I think the only thing that we're going to care

75
00:04:07,000 --> 00:04:11,000
about for the purposes of these tests is that a review has a rating.

76
00:04:11,000 --> 00:04:15,000
In this case, we'll just have a single review, keep things very simple; the rating is a four.

77
00:04:15,000 --> 00:04:18,000
That's the data I want to evaluate.

78
00:04:18,000 --> 00:04:23,000
And now I can start thinking about the API that I want to use to compute the restaurant rating.

79
00:04:23,000 --> 00:04:27,000
This would be the point where I could experiment with different class names and method names

80
00:04:27,000 --> 00:04:29,000
until I found something that looks like it might work.

81
00:04:29,000 --> 00:04:32,000
And let's say I reach the point where I've decided

82
00:04:32,000 --> 00:04:35,000
that I think a restaurant rater might work,

83
00:04:35,000 --> 00:04:38,000
so I will create a restaurant rater and pass the data into it.

84
00:04:38,000 --> 00:04:41,000
And, of course, this code doesn't compile, but I don't expect it to yet.

85
00:04:41,000 --> 00:04:43,000
Remember, this is just a whiteboard.

86
00:04:43,000 --> 00:04:46,000
In fact, one of the first steps that you'll take many times

87
00:04:46,000 --> 00:04:50,000
with test-driven development is writing some code that doesn't even compile yet.

88
00:04:50,000 --> 00:04:52,000
The goal is to go and do the simplest possible thing to get it

89
00:04:52,000 --> 00:04:56,000
to compile once you're relatively happy with the names and the design.

90
00:04:56,000 --> 00:05:02,000
Next, I might say that this rater -- I can tell it to compute a rating given some number

91
00:05:02,000 --> 00:05:06,000
that it will use to determine how many reviews to use, so let's say 10 reviews,

92
00:05:06,000 --> 00:05:08,000
and it will give me back some sort of result.

93
00:05:08,000 --> 00:05:12,000
Again, this is the time where I am exploring how I want to invoke these API's,

94
00:05:12,000 --> 00:05:14,000
and what these API's should look like.

95
00:05:14,000 --> 00:05:15,000
What parameters do I want to pass?

96
00:05:15,000 --> 00:05:17,000
What do I want to name things?

97
00:05:17,000 --> 00:05:21,000
And forging ahead with what I have so far, I'm thinking that if I tell this

98
00:05:21,000 --> 00:05:24,000
to compute the result for a restaurant with a single review,

99
00:05:24,000 --> 00:05:28,000
and we're doing just the simple averaging for right now, I should be able to write an assert

100
00:05:28,000 --> 00:05:33,000
at this point, and assert that four would be the "result.rating".

101
00:05:33,000 --> 00:05:37,000
At this point, if I tried to do a build or run the test, it's going to fail miserably

102
00:05:37,000 --> 00:05:42,000
because we don't compile, but I can use "Visual Studio" to help me create the classes.

103
00:05:42,000 --> 00:05:46,000
Just put the cursor on "Restaurant Rater", open the drop-down list with "Control-Period",

104
00:05:46,000 --> 00:05:48,000
and let's generate a class from "Restaurant Rater"

105
00:05:48,000 --> 00:05:54,000
that will create a new ".cs" file in this project.

106
00:05:54,000 --> 00:05:57,000
Ultimately, it's going to need to be in the "Ode to Food" project because it's going

107
00:05:57,000 --> 00:06:01,000
to be business logic that we need to exercise from the web application,

108
00:06:01,000 --> 00:06:03,000
but leaving it in here is fine for right now.

109
00:06:03,000 --> 00:06:06,000
I haven't solidified anything yet; things might change.

110
00:06:06,000 --> 00:06:10,000
At some point, the design will start to firm up and I can move these ".cs" files

111
00:06:10,000 --> 00:06:13,000
into the right project, and then adjust the name spaces accordingly.

112
00:06:13,000 --> 00:06:16,000
My next compiler error is that the "Restaurant Rater" needs a constructor

113
00:06:16,000 --> 00:06:19,000
that takes some restaurant information.

114
00:06:19,000 --> 00:06:22,000
Again, I can generate this from "Visual Studio", just "Control-Period",

115
00:06:22,000 --> 00:06:25,000
and select the entry "Generate Constructor Stub".

116
00:06:25,000 --> 00:06:26,000
That should be there now.

117
00:06:26,000 --> 00:06:29,000
It's going to need a method called "Compute Rating".

118
00:06:29,000 --> 00:06:32,000
I will also generate that.

119
00:06:32,000 --> 00:06:35,000
And let's look at what we've developed so far in side of "Restaurant Rater".

120
00:06:35,000 --> 00:06:39,000
We have a "Public Constructor" that takes a restaurant that seems good.

121
00:06:39,000 --> 00:06:43,000
Let's get rid of the spurious name space here by deleting that and bringing in a using statement

122
00:06:43,000 --> 00:06:47,000
for "Ode to Food.models", and then I can delete that here also,

123
00:06:47,000 --> 00:06:49,000
just trying to clean up the code already.

124
00:06:49,000 --> 00:06:54,000
I should really wait until I have a passing test, and then come in and do changes like this.

125
00:06:54,000 --> 00:06:56,000
That would be the re-factoring step.

126
00:06:56,000 --> 00:07:03,000
This "Compute Rating" method, I believe, will ultimately return some sort of rating result.

127
00:07:03,000 --> 00:07:10,000
Let's create that, generate a class for "Rating Result".

128
00:07:10,000 --> 00:07:14,000
So it's not going to return "Object"; it's going to return a rating result,

129
00:07:14,000 --> 00:07:16,000
and we don't need this exception here.

130
00:07:16,000 --> 00:07:20,000
What I could do, the simplest possible thing to make this work,

131
00:07:20,000 --> 00:07:28,000
would be to just return a new rating result, not even do any calculations just yet.

132
00:07:28,000 --> 00:07:30,000
And are we ready to build?

133
00:07:30,000 --> 00:07:32,000
Not quite yet.

134
00:07:32,000 --> 00:07:34,000
It looks like my "Rating Result" needs a rating property,

135
00:07:34,000 --> 00:07:39,000
and my "Compute Rating" method needs to be public.

136
00:07:39,000 --> 00:07:43,000
So let's come in and change this.

137
00:07:43,000 --> 00:07:49,000
This is a public method, and "Rating Result" will ultimately be a public class,

138
00:07:49,000 --> 00:07:54,000
and it's going to have a "Property of Type Integer" that is the rating.

139
00:07:54,000 --> 00:07:58,000
I know this is an integer because the business specifically asked me

140
00:07:58,000 --> 00:08:02,000
to make ratings an integer value so we don't have ratings like seven point six six six

141
00:08:02,000 --> 00:08:05,000
that scare users; that would just be a seven or an eight.

142
00:08:05,000 --> 00:08:10,000
And at this point, I think, I can do a build.

143
00:08:10,000 --> 00:08:12,000
Build succeeded.

144
00:08:12,000 --> 00:08:16,000
I'll run all the tests with "Control-R A", and of course, our new test method fails.

145
00:08:16,000 --> 00:08:22,000
We told it that it should be expecting a four result; the actual result it got back

146
00:08:22,000 --> 00:08:26,000
from "Result.rating" was a zero because we haven't done any calculations.

147
00:08:26,000 --> 00:08:29,000
And this is the first step in TDD.

148
00:08:29,000 --> 00:08:31,000
I've designed some classes, designed some methods.

149
00:08:31,000 --> 00:08:33,000
I now have a failing test.

150
00:08:33,000 --> 00:08:38,000
My next goal is to do the simplest possible thing that will make that test pass,

151
00:08:38,000 --> 00:08:41,000
and the absolute simplest possible thing would be to say --

152
00:08:41,000 --> 00:08:52,000
let's say that the result equals a new rating result, "'Result.rating' equals four".

153
00:08:52,000 --> 00:08:56,000
"Return Result", run the tests, now "Test Method One" passes.

154
00:08:56,000 --> 00:09:00,000
And you might look at that and say, "It's completely ridiculous.

155
00:09:00,000 --> 00:09:03,000
You're hard-coding computations just to make the test pass."

156
00:09:03,000 --> 00:09:05,000
However, stick with me on this.

157
00:09:05,000 --> 00:09:09,000
One of the tenets of doing test-driven development is to do the simplest possible thing

158
00:09:09,000 --> 00:09:13,000
to make a test pass, and then you just keep adding tests that will test more conditions.

159
00:09:13,000 --> 00:09:16,000
You're going to have to come in and change this "Compute Rating" code

160
00:09:16,000 --> 00:09:18,000
so it actually behaves correctly.

161
00:09:18,000 --> 00:09:22,000
But along the way, as you're making these changes, you're going to be writing tests

162
00:09:22,000 --> 00:09:26,000
that validate scenarios that are going to prove very valuable later on.

163
00:09:26,000 --> 00:09:30,000
They're going to make sure that you're making the right changes, that as you're adding things

164
00:09:30,000 --> 00:09:32,000
and adding features and reconstructing the code,

165
00:09:32,000 --> 00:09:34,000
that you're not breaking anything that used to work.

166
00:09:34,000 --> 00:09:37,000
That's one of the real values of having tests.

167
00:09:37,000 --> 00:09:41,000
And once you have a passing test, one of the first things you'll want to do is come in

168
00:09:41,000 --> 00:09:45,000
and re-factor, clean code up, make sure things are named properly.

169
00:09:45,000 --> 00:09:47,000
I don't really like the "To-Do" statement here.

170
00:09:47,000 --> 00:09:55,000
In fact, I don't really like having a data field in here when this is really a restaurant.

171
00:09:55,000 --> 00:09:59,000
And I can use "Visual Studio", "Control-Period", to say,

172
00:09:59,000 --> 00:10:03,000
"Rename data to restaurant everywhere," And that fixes things up for me.

173
00:10:03,000 --> 00:10:07,000
I also want this to be called "Restaurant".

174
00:10:07,000 --> 00:10:12,000
Same trick here, "Control-Period", it will rename the local use

175
00:10:12,000 --> 00:10:17,000
of that restaurant variable, also, this "P parameter", no idea what that means,

176
00:10:17,000 --> 00:10:22,000
so let's just change it right away to "Number of Reviews".

177
00:10:22,000 --> 00:10:24,000
That's what it's supposed to be, ultimately.

178
00:10:24,000 --> 00:10:26,000
And now I'll hit "Control-R", "Control-A" again.

179
00:10:26,000 --> 00:10:28,000
Test method is still passing.

180
00:10:28,000 --> 00:10:29,000
My changes haven't broken anything.

181
00:10:29,000 --> 00:10:33,000
Those are very simple changes, but you can imagine, as things build up in complexity,

182
00:10:33,000 --> 00:10:36,000
you change things in one place it breaks something somewhere else.

183
00:10:36,000 --> 00:10:40,000
That's a sign that the tests are helping you, and also that you might have a design issue.

184
00:10:40,000 --> 00:10:44,000
Maybe something is too coupled to another class.

185
00:10:44,000 --> 00:10:50,000
But now that we've seen a basic test in action, I'm going to accelerate things a bit,

186
00:10:50,000 --> 00:10:54,000
and work through the rest of the design and implementation of this feature.

187
00:10:54,000 --> 00:59:00,000
( Silence )


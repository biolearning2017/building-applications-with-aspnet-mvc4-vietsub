1
00:00:01,000 --> 00:00:03,000
The action link helper that we just used is one

2
00:00:03,000 --> 00:00:07,000
of many HTML helpers available inside of the view.

3
00:00:07,000 --> 00:00:11,000
The purpose of an HTML helper is to make it easy to create small blocks of HTML.

4
00:00:11,000 --> 00:00:16,000
There are helpers to create links like action link but there's also helpers to create inputs,

5
00:00:16,000 --> 00:00:19,000
validation messages, labels and more.

6
00:00:19,000 --> 00:00:21,000
Many of these helpers are quite intelligent.

7
00:00:21,000 --> 00:00:27,000
For example, in these codes on the screen, we're calling HTML.EditorFor and passing

8
00:00:27,000 --> 00:00:31,000
in an expression that references a property on the model, the FirstName property.

9
00:00:31,000 --> 00:00:35,000
EditorFor can walk up to that property and examine its type,

10
00:00:35,000 --> 00:00:38,000
determined that the FirstName property is a string and therefore what it needs

11
00:00:38,000 --> 00:00:42,000
to do is emit an input type equals text.

12
00:00:42,000 --> 00:00:46,000
If instead we were using EditorFor against the Boolean property,

13
00:00:46,000 --> 00:00:49,000
then EditorFor could produce a checkbox input.

14
00:00:49,000 --> 00:00:51,000
There's actually a number of other things that EditorFor will do.

15
00:00:51,000 --> 00:00:54,000
We'll explore this as we move throughout the rest of the course.

16
00:00:54,000 --> 00:00:58,000
But all of these methods like EditorFor, LabelFor, ValidationSummary,

17
00:00:58,000 --> 00:01:01,000
they're available from an HTML property that a view inherits.

18
00:01:01,000 --> 00:01:04,000
That's another reason we call them HTML helpers

19
00:01:04,000 --> 00:01:08,000
and it's also the reason we access them using HTML dot.

20
00:01:08,000 --> 00:01:13,000
Let's use a few of these in our application.

21
00:01:13,000 --> 00:01:16,000
Inside of our Index view, lets' give ourselves the ability

22
00:01:16,000 --> 00:01:20,000
to edit any particular restaurant review because the edit scenario is going

23
00:01:20,000 --> 00:01:23,000
to involve a lot more HTML helpers than what we've seen so far.

24
00:01:23,000 --> 00:01:27,000
So let me add a span inside of a div for each review,

25
00:01:27,000 --> 00:01:30,000
a span that's going to be aligned to the right.

26
00:01:30,000 --> 00:01:36,000
And inside of here we will use HTML.ActionLink to display a link that displays the text edit

27
00:01:36,000 --> 00:01:40,000
and we'll go to the Edit action on this current controller.

28
00:01:40,000 --> 00:01:43,000
I also need to pass along some information so that the Edit action knows

29
00:01:43,000 --> 00:01:49,000
which review I'm trying to edit and I can do that by passing along the ID of the review.

30
00:01:49,000 --> 00:01:51,000
So I just need to say item.Id.

31
00:01:51,000 --> 00:01:56,000
The ID property then is wrapped up in an anonymous object.

32
00:01:56,000 --> 00:02:00,000
And you can put as many additional values as you want inside that anonymous object,

33
00:02:00,000 --> 00:02:02,000
that get passed along to the routing engine

34
00:02:02,000 --> 00:02:06,000
and essentially say here's some additional information that needs to go in the URL.

35
00:02:06,000 --> 00:02:11,000
The routing engine is going to look at ID and say, oh, I can see where I can put ID actually

36
00:02:11,000 --> 00:02:15,000
into the URL, so we should come out with something like slash reviews, slash edit,

37
00:02:15,000 --> 00:02:19,000
slash three to edit the review with an ID of three.

38
00:02:19,000 --> 00:02:24,000
And let's test it out, I'll save the view, refresh the browser.

39
00:02:24,000 --> 00:02:25,000
There's our Edit link.

40
00:02:25,000 --> 00:02:26,000
It looks correct.

41
00:02:26,000 --> 00:02:28,000
Slash review, slash edit, slash three.

42
00:02:28,000 --> 00:02:32,000
And when I click on that, we already have an edit controller action

43
00:02:32,000 --> 00:02:36,000
because when we scaffold it out this controller, we said that we wanted a controller

44
00:02:36,000 --> 00:02:39,000
with the ability to update reviews.

45
00:02:39,000 --> 00:02:41,000
But what we don't have yet is a view itself.

46
00:02:41,000 --> 00:02:46,000
But that's okay because we also need to add a little bit more logic here into the edit action.

47
00:02:46,000 --> 00:02:49,000
This is the edit action that responds to that Get request.

48
00:02:49,000 --> 00:02:52,000
The ID that's in the URL will automatically be extracted

49
00:02:52,000 --> 00:02:55,000
by the runtime and passed into our action.

50
00:02:55,000 --> 00:02:59,000
All I need to do is go out to our data source and find that review that we want to edit.

51
00:02:59,000 --> 00:03:05,000
So I can say that the review, it goes reviews give me the single review.

52
00:03:05,000 --> 00:03:09,000
Or I'm given a review R dot ID equals that incoming ID.

53
00:03:09,000 --> 00:03:12,000
So just a little link query to say give me single object out of this collection

54
00:03:12,000 --> 00:03:17,000
that matches this criteria, its ID property has to match this incoming ID parameter

55
00:03:17,000 --> 00:03:21,000
and that is the model for our view.

56
00:03:21,000 --> 00:03:25,000
Now we actually need an edit views but we don't have this error screen over here.

57
00:03:25,000 --> 00:03:30,000
I can right click inside the edit action say please add a view for me.

58
00:03:30,000 --> 00:03:32,000
We do want it to be called the edit view, we do want to use Razor.

59
00:03:32,000 --> 00:03:35,000
It's going to be strongly-typed against the RestaurantReview.

60
00:03:35,000 --> 00:03:37,000
All of this is correct.

61
00:03:37,000 --> 00:03:40,000
But I do want to scaffold out this time an edit view.

62
00:03:40,000 --> 00:03:44,000
Now when I click Add, I'll have a brand new edit view.

63
00:03:44,000 --> 00:03:47,000
And what I should be able to do now is just do a quick build

64
00:03:47,000 --> 00:03:51,000
and refresh slash review slash edit slash three.

65
00:03:51,000 --> 00:03:54,000
And now I have a form that will let me edit all these values.

66
00:03:54,000 --> 00:03:58,000
So let's take a step back and see what some of these HTML helpers are doing.

67
00:03:58,000 --> 00:04:03,000
And one easy way to do that is to go in and view the source for this

68
00:04:03,000 --> 00:04:06,000
and compare it to what is inside of our view.

69
00:04:06,000 --> 00:04:09,000
Let me scroll down a bit.

70
00:04:09,000 --> 00:04:12,000
And now we can start to match some things up.

71
00:04:12,000 --> 00:04:17,000
So HTML.BeginForm writes out an opening form tag.

72
00:04:17,000 --> 00:04:21,000
Without passing any additional parameters into begin form, what it will do is emit

73
00:04:21,000 --> 00:04:26,000
that form tag, it will set the action of that form tag to go to the same URL that we came

74
00:04:26,000 --> 00:04:31,000
from slash Review slash Edit slash 3 but to do a post back when the user clicks on the button

75
00:04:31,000 --> 00:04:33,000
to submit this form and save data.

76
00:04:33,000 --> 00:04:36,000
Begin form is useful because you can pass in additional parameters

77
00:04:36,000 --> 00:04:38,000
to change that URL, change the method.

78
00:04:38,000 --> 00:04:41,000
It will take care of emitting the correct HTML.

79
00:04:41,000 --> 00:04:44,000
A little further down we have a HTML.HiddenFor.

80
00:04:44,000 --> 00:04:49,000
What this helper will do is it will emit an input type equals hidden into the form

81
00:04:49,000 --> 00:04:52,000
so we're storing the ID value in the form.

82
00:04:52,000 --> 00:04:56,000
We're just not giving the user the ability to edit that value, it's a hidden input.

83
00:04:56,000 --> 00:05:00,000
And down a little bit further we have HTML.LabelFor.

84
00:05:00,000 --> 00:05:02,000
Labels are great for accessibility.

85
00:05:02,000 --> 00:05:05,000
And this is simply building a label attribute where the

86
00:05:05,000 --> 00:05:09,000
for attribute is equal to the name of the property.

87
00:05:09,000 --> 00:05:14,000
So the name is name-- or the name of the city, in that case will build label for city.

88
00:05:14,000 --> 00:05:22,000
And then we have editor for HTML.EditorFor is literally saying I want an editor

89
00:05:22,000 --> 00:05:23,000
for this property.

90
00:05:23,000 --> 00:05:26,000
Now you go out and figure out what the best type of editor for.

91
00:05:26,000 --> 00:05:29,000
Maybe that editor will be an input type equals text

92
00:05:29,000 --> 00:05:32,000
or an input type equals number or a checkbox or radio button.

93
00:05:32,000 --> 00:05:38,000
In fact if we scroll down a little bit further, we can see that the input

94
00:05:38,000 --> 00:05:40,000
for a rating is type equals number.

95
00:05:40,000 --> 00:05:45,000
That's a new input field for HTML 5 on browsers that are up-to-date with the standards,

96
00:05:45,000 --> 00:05:49,000
they'll know that the user is supposed to input a number here not just some random string

97
00:05:49,000 --> 00:05:54,000
like A B C. There's also a lot of data dash attributes in here

98
00:05:54,000 --> 00:05:57,000
like data dash val, data dash val dash number.

99
00:05:57,000 --> 00:06:00,000
Those are providing data for client side validation.

100
00:06:00,000 --> 00:06:02,000
We'll talk about that later in this course.

101
00:06:02,000 --> 00:06:07,000
But for now, I just want to point out that this is what HTML helpers are all about.

102
00:06:07,000 --> 00:06:12,000
We could certainly for the rating come in and all by ourselves say

103
00:06:12,000 --> 00:06:19,000
that we just want an input type equals number and set the value to at Model.Rating

104
00:06:19,000 --> 00:06:21,000
but EditorFor will do that for us.

105
00:06:21,000 --> 00:06:25,000
And also populate the ID and the name attributes so that the editor

106
00:06:25,000 --> 00:06:28,000
of the input matches that property name of our model.

107
00:06:28,000 --> 00:06:32,000
And if you remember back in our discussion in the last module, we talked about the way

108
00:06:32,000 --> 00:06:37,000
that the MVC has a way of matching up things that we need by name.

109
00:06:37,000 --> 00:06:42,000
So if we see that we need an ID parameter as a parameter to our action method, it will go out

110
00:06:42,000 --> 00:06:44,000
and look for something called ID and it can look

111
00:06:44,000 --> 00:06:47,000
in the routing data, it can look in the query string.

112
00:06:47,000 --> 00:06:49,000
It can also look in these posted form values.

113
00:06:49,000 --> 00:06:54,000
So if I need a rating for my model something that the user has typed into the screen

114
00:06:54,000 --> 00:06:58,000
and then click save, the MVC framework can automatically find that rating and move it

115
00:06:58,000 --> 00:07:01,000
into a property for me just based on a naming convention.

116
00:07:01,000 --> 00:07:03,000
We'll see that here in just a second.

117
00:07:03,000 --> 00:07:08,000
But let me close the source code view and implement what should happen

118
00:07:08,000 --> 00:07:10,000
when the user clicks on the save button.

119
00:07:10,000 --> 00:07:13,000
In that case that's going to be an HTTP post message.

120
00:07:13,000 --> 00:07:15,000
This is also a topic we talked about in the last module.

121
00:07:15,000 --> 00:07:21,000
That will end up not at this edit action because this responds to a get request.

122
00:07:21,000 --> 00:07:24,000
It will end up at this edit action that explicitly advertises itself

123
00:07:24,000 --> 00:07:28,000
as basically only replying to a post.

124
00:07:28,000 --> 00:07:32,000
I'm going to change around the code that was given to us automatically just a little bit.

125
00:07:32,000 --> 00:07:36,000
And the idea here is that I want to take values that the users typed in.

126
00:07:36,000 --> 00:07:41,000
I want them-- and I want to move them into a review so I can save that.

127
00:07:41,000 --> 00:07:43,000
First, let's grab the review that we need to edit.

128
00:07:43,000 --> 00:07:50,000
And then to move the values in, I'm going to call a method called TryUpdateModel.

129
00:07:50,000 --> 00:07:55,000
What TryUpdateModel will do is go through a process known as model binding.

130
00:07:55,000 --> 00:08:00,000
In fact, model binding happens anytime you even have a parameter in an action method.

131
00:08:00,000 --> 00:08:04,000
It's what ASP.NET MVC does when it goes out and it looks around in the request try

132
00:08:04,000 --> 00:08:07,000
to find things to move into an object for you.

133
00:08:07,000 --> 00:08:11,000
So when I have a parameter called ID on the edit action,

134
00:08:11,000 --> 00:08:16,000
the model binder in ASP.NET MVC will find that ID, move it into that for me.

135
00:08:16,000 --> 00:08:20,000
When I say TryUpdateModel on review, the model binder will go out and look at review,

136
00:08:20,000 --> 00:08:24,000
see that it has a rating property, and then go out and try to find something called rating.

137
00:08:24,000 --> 00:08:29,000
But fortunately, there should be a posted form input named rating.

138
00:08:29,000 --> 00:08:32,000
The MVC runtime will find that and just move it into my review.

139
00:08:32,000 --> 00:08:37,000
If anything fails, if any validation errors occur, TryUpdateModel will return false

140
00:08:37,000 --> 00:08:39,000
and I don't want to save that review.

141
00:08:39,000 --> 00:08:41,000
We'll talk more about validation later.

142
00:08:41,000 --> 00:08:48,000
And if that happens, I can return the view with that same review to try

143
00:08:48,000 --> 00:08:52,000
to let the user fix whatever problem they have.

144
00:08:52,000 --> 00:08:58,000
But if TryUpdateModel works, this is the point where I would save that into the database.

145
00:08:58,000 --> 00:08:59,000
We're not working with the database yet.

146
00:08:59,000 --> 00:09:04,000
And for right now, what I will do is return a redirect action.

147
00:09:04,000 --> 00:09:06,000
Let's go back to the index action.

148
00:09:06,000 --> 00:09:09,000
I want to redirect here instead of just letting the users sit

149
00:09:09,000 --> 00:09:12,000
on the saved values on that posted form field.

150
00:09:12,000 --> 00:09:15,000
It's very common that after an HTTP post

151
00:09:15,000 --> 00:09:18,000
where the user has saved something you redirect them back to a page

152
00:09:18,000 --> 00:09:20,000
where they can view the changed results.

153
00:09:20,000 --> 00:09:24,000
That way, they don't hit refresh on the result of this post operation

154
00:09:24,000 --> 00:09:27,000
and accidentally submit something twice.

155
00:09:27,000 --> 00:09:34,000
But with this logic in place, let's try to do a build and let me come out and do a get

156
00:09:34,000 --> 00:09:38,000
on this page slash review slash edit slash 3 so we can start everything over.

157
00:09:38,000 --> 00:09:43,000
So you can come up again with the house of Elliot let's bump the rating down to a 9

158
00:09:43,000 --> 00:09:47,000
and click save and you can see we made that change.

159
00:09:47,000 --> 00:09:54,000
Let's edit this again change this back to a 10, perhaps using alternate spelling for Gent

160
00:09:54,000 --> 00:09:57,000
and click save, those change is also reflected here.

161
00:09:57,000 --> 00:10:03,000
And one of the reasons this was so easy to build is because we're using TryUpdateModel

162
00:10:03,000 --> 00:10:06,000
which just relies on the names of properties to match up data

163
00:10:06,000 --> 00:10:08,000
with what needs to get pushed into the model.

164
00:10:08,000 --> 00:10:14,000
And all of that matches up because our edit view is using things like HTML.EditorFor

165
00:10:14,000 --> 00:10:17,000
which will automatically build the correct inputs with the right names and the IDs

166
00:10:17,000 --> 00:10:21,000
and the validation and everything else associated with it.

167
00:10:21,000 --> 00:10:26,000
There are many other HTML helpers that are available than what you see here,

168
00:10:26,000 --> 00:10:29,000
you can see them in the IntelliSense window.

169
00:10:29,000 --> 00:10:30,000
There's ways to build check boxes.

170
00:10:30,000 --> 00:10:35,000
There's ways to display things, there's ways to generate names,

171
00:10:35,000 --> 00:10:37,000
route links and validation messages.

172
00:10:37,000 --> 00:10:42,000
You can also build your own custom HTML helpers.

173
00:10:42,000 --> 00:10:46,000
And I would suggest that if you find yourself typing a lot of C sharp code into a Razor view

174
00:10:46,000 --> 00:10:51,000
to build an HTML element, I would suggest you go out and look at how to build a custom helper.

175
00:10:51,000 --> 00:10:56,000
They're very easy to build and then they're very easy to use and a custom helper can really help

176
00:10:56,000 --> 00:11:00,000
to get logic out of your view and keep the view as simple as possible.

177
00:11:00,000 --> 00:11:06,000
That's really the ultimate goal of the HTML helpers, keeps views simple.

178
00:11:06,000 --> 00:59:00,000
( Pause )


1
00:00:01,000 --> 00:00:05,000
Output caching allows you to store the output of a particular controller action in memory.

2
00:00:05,000 --> 00:00:09,000
ASP.net can then respond to future requests for the same action just

3
00:00:09,000 --> 00:00:15,000
by giving back the cached result and that avoids executing any of the code inside the action.

4
00:00:15,000 --> 00:00:17,000
Because you're executing less code and doing less work,

5
00:00:17,000 --> 00:00:21,000
caching can lead to some pretty dramatic performance gains but you do have to be able

6
00:00:21,000 --> 00:00:24,000
to careful when using the cache to avoid erroneous responses.

7
00:00:24,000 --> 00:00:26,000
I'll show you such a scenario in our demo.

8
00:00:26,000 --> 00:00:30,000
Caching itself is easy to enable using the output cache action filter.

9
00:00:30,000 --> 00:00:34,000
You can cache actions that produce few results and jayson (phonetic) results

10
00:00:34,000 --> 00:00:37,000
or really any type of data oriented result.

11
00:00:37,000 --> 00:00:40,000
You'd primarily want to cache the actions that get called the most or the ones

12
00:00:40,000 --> 00:00:44,000
that are expensive because they execute a slow database query.

13
00:00:44,000 --> 00:00:47,000
Those are some of those places where you would get your biggest win

14
00:00:47,000 --> 00:00:48,000
with the output cache attribute.

15
00:00:48,000 --> 00:00:52,000
The attribute will also work on child (phonetic) actions as we'll see and there's a variety

16
00:00:52,000 --> 00:00:56,000
of options you can specify on the attribute itself like the duration

17
00:00:56,000 --> 00:00:59,000
that the cache items should leave in memory, that's specified in seconds

18
00:00:59,000 --> 00:01:02,000
and what parameters should bury the cache.

19
00:01:02,000 --> 00:01:05,000
This is best understood through an example.

20
00:01:05,000 --> 00:01:07,000
( Silence )

21
00:01:07,000 --> 00:01:11,000
Inside the home controller for the application, let's add an output cache attribute here.

22
00:01:11,000 --> 00:01:13,000
We'll add it to the index action.

23
00:01:13,000 --> 00:01:16,000
The index action represents the home page of the application

24
00:01:16,000 --> 00:01:19,000
and chances are it might get the most traffic of the entire site.

25
00:01:19,000 --> 00:01:22,000
And I say might because I don't really know.

26
00:01:22,000 --> 00:01:26,000
One of the tips to implementing a successful caching strategy is you really do have

27
00:01:26,000 --> 00:01:28,000
to know where your traffic is going.

28
00:01:28,000 --> 00:01:31,000
You have to know what are the most expensive operations in your software.

29
00:01:31,000 --> 00:01:34,000
You have to take some measurements and do some logging in order for caching

30
00:01:34,000 --> 00:01:37,000
to really work effectively but this is just a demonstration

31
00:01:37,000 --> 00:01:40,000
of how the output cache attribute works.

32
00:01:40,000 --> 00:01:41,000
So I'll place the attribute there.

33
00:01:41,000 --> 00:01:46,000
Set a break point at the beginning of this action and then run with the debugger.

34
00:01:46,000 --> 00:01:48,000
( Silence )

35
00:01:48,000 --> 00:01:51,000
And what we should see here is on this first request, we will hit that break point

36
00:01:51,000 --> 00:01:56,000
so we're inside of the index action and you'll notice the one parameter I have to specify

37
00:01:56,000 --> 00:01:58,000
with the output cache attribute is the duration.

38
00:01:58,000 --> 00:02:00,000
How long do I cache the response?

39
00:02:00,000 --> 00:02:03,000
It's specified in seconds and this is 60 seconds.

40
00:02:03,000 --> 00:02:09,000
So now if I press F5 to continue with the debugger, I can now see the home page

41
00:02:09,000 --> 00:02:14,000
and now I can refresh this as many times as I want and the caching logic inside

42
00:02:14,000 --> 00:02:19,000
of ASP.net is looking at the request, seeing that there's a cached response for this request.

43
00:02:19,000 --> 00:02:21,000
So it doesn't even go into my code at all.

44
00:02:21,000 --> 00:02:23,000
It just returns that cached response.

45
00:02:23,000 --> 00:02:26,000
We don't execute code inside of the index action.

46
00:02:26,000 --> 00:02:27,000
We don't render any views.

47
00:02:27,000 --> 00:02:30,000
Everything is just a cached response that's being served back from memory

48
00:02:30,000 --> 00:02:34,000
and not executing code is the best optimization of all.

49
00:02:34,000 --> 00:02:37,000
It's the best way to increase performance and scalability.

50
00:02:37,000 --> 00:02:39,000
Now this also works with child actions.

51
00:02:39,000 --> 00:02:44,000
So let's stop debugging and let me add another action here.

52
00:02:44,000 --> 00:02:46,000
It's going to be a child action.

53
00:02:46,000 --> 00:02:47,000
It's called say hello.

54
00:02:47,000 --> 00:02:50,000
It's also going to be cached and we'll say for 60 seconds.

55
00:02:50,000 --> 00:02:56,000
And I went to change the duration of the output cache for the index action to just 5 seconds

56
00:02:56,000 --> 00:03:00,000
and now inside of the view for this index action,

57
00:03:00,000 --> 00:03:03,000
we will need to call and render this child action.

58
00:03:03,000 --> 00:03:10,000
So let me go into index.cshtml and do a quick html.action.

59
00:03:10,000 --> 00:03:12,000
Please render say hello.

60
00:03:12,000 --> 00:03:14,000
Call into that controller action.

61
00:03:14,000 --> 00:03:16,000
Save everything and let's run with the debugger again

62
00:03:16,000 --> 00:03:20,000
after I set a break point here, inside of say hello.

63
00:03:20,000 --> 00:03:27,000
So F5 and on this first request, we should see that we come into the index action which we do

64
00:03:27,000 --> 00:03:31,000
and we come into the say hello child action.

65
00:03:31,000 --> 00:03:38,000
So I'll continue debugging and now if I refresh, more than 5 seconds elapsed.

66
00:03:38,000 --> 00:03:42,000
So we're back inside the index action and we need to re-execute all of that code

67
00:03:42,000 --> 00:03:46,000
but we don't need to execute say hello again.

68
00:03:46,000 --> 00:03:51,000
So the MVC framework is able to cache that small part of the response independently

69
00:03:51,000 --> 00:03:55,000
and when I refresh the page, yes it has to rebuild everything else

70
00:03:55,000 --> 00:03:58,000
and execute the database inquiry inside the index action

71
00:03:58,000 --> 00:04:00,000
but it doesn't to call back in to say hello.

72
00:04:00,000 --> 00:04:03,000
If I had something that was particularly expensive to produce

73
00:04:03,000 --> 00:04:07,000
and it was relatively static so I could aggressively cache it, that's a good place

74
00:04:07,000 --> 00:59:00,000
to use html.action just to cache the result of something expensive.


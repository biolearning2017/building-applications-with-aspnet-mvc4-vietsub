1
00:00:01,000 --> 00:00:04,000
I'm sure you can think of many validation scenarios that are not covered

2
00:00:04,000 --> 00:00:08,000
by the validation attributes provided with the framework.

3
00:00:08,000 --> 00:00:10,000
This is when you can implement custom validation logic.

4
00:00:10,000 --> 00:00:12,000
And there's a couple different approaches you can take

5
00:00:12,000 --> 00:00:15,000
that will plug right into the framework.

6
00:00:15,000 --> 00:00:18,000
One popular approach is to write a custom validation attribute.

7
00:00:18,000 --> 00:00:23,000
Use this approach when you have validation logic that you want to apply to multiple models.

8
00:00:23,000 --> 00:00:25,000
An example might look like this.

9
00:00:25,000 --> 00:00:28,000
I'm going to temporarily paste some code inside of here,

10
00:00:28,000 --> 00:00:30,000
that's not something we're going to keep in the project.

11
00:00:30,000 --> 00:00:33,000
So I'm just going to keep it in the same file as a Restaurant Review

12
00:00:33,000 --> 00:00:37,000
and we'll remove it after I explain what it is.

13
00:00:37,000 --> 00:00:39,000
This is a maxWords attribute.

14
00:00:39,000 --> 00:00:42,000
What I can do with this is restrict the number of words

15
00:00:42,000 --> 00:00:44,000
that a user can enter into a string property.

16
00:00:44,000 --> 00:00:49,000
It does this just by using a simple check and looking at the number of space characters.

17
00:00:49,000 --> 00:00:51,000
So it's not an advanced validation.

18
00:00:51,000 --> 00:00:54,000
I'm just really showing you how to go about implementing this approach.

19
00:00:54,000 --> 00:00:59,000
And before I explain what it does, let me just show you how you could use it.

20
00:00:59,000 --> 00:01:05,000
Let's say that we wanted to restrict Reviewer Name to be a single word.

21
00:01:05,000 --> 00:01:09,000
And I could say, maxWords and you need to pass in a parameter

22
00:01:09,000 --> 00:01:11,000
which is the maximum number of words.

23
00:01:11,000 --> 00:01:15,000
So let's say just a single word for Reviewer Name.

24
00:01:15,000 --> 00:01:22,000
And now, if I do a build and come out into the application,

25
00:01:22,000 --> 00:01:28,000
I'm going to try to edit this User Name and put in Scott Allen

26
00:01:28,000 --> 00:01:32,000
and click Save, User Name has too many words.

27
00:01:32,000 --> 00:01:37,000
But if I go with just Scott, everything is fine.

28
00:01:37,000 --> 00:01:39,000
So my validation attribute is working.

29
00:01:39,000 --> 00:01:43,000
Let me remove it from here and I'll show you what it does.

30
00:01:43,000 --> 00:01:48,000
First you derive from a base class ValidationAttribute.

31
00:01:48,000 --> 00:01:51,000
The MVC runtime and the model binder, they respect ValidationAttibute.

32
00:01:51,000 --> 00:01:53,000
So that automatically plugs you into the framework.

33
00:01:53,000 --> 00:01:59,000
And when you derive from ValidationAttribute, you can override a method is valid.

34
00:01:59,000 --> 00:02:04,000
When the model binders performing validation on your model, it will pass in the value

35
00:02:04,000 --> 00:02:06,000
of the property where you place this attribute.

36
00:02:06,000 --> 00:02:10,000
So here, it would pass in the Reviewer Name when it's validating a Restaurant Review.

37
00:02:10,000 --> 00:02:16,000
And then it's up to me to inspect that value and see if it meets the proper criteria.

38
00:02:16,000 --> 00:02:21,000
We're just doing a String.Split to create an array and it's going to split

39
00:02:21,000 --> 00:02:25,000
up that string wherever it sees a space character then look at the Length

40
00:02:25,000 --> 00:02:26,000
and see if that is created with maxWords.

41
00:02:26,000 --> 00:02:30,000
So again, a very simple brute force validation.

42
00:02:30,000 --> 00:02:33,000
I'm sure you can think of all sorts of edge cases where this would fail

43
00:02:33,000 --> 00:02:37,000
but this is really more just about showing you how to implement custom validation logic.

44
00:02:37,000 --> 00:02:39,000
You could have anything inside of here.

45
00:02:39,000 --> 00:02:44,000
If the model passes validation, you can just return ValidationResult.Success.

46
00:02:44,000 --> 00:02:47,000
But if there is a problem, you want to return a new ValidationResult

47
00:02:47,000 --> 00:02:50,000
and associate an errorMessage with it.

48
00:02:50,000 --> 00:02:54,000
And the error message you can create using another method that you inherit

49
00:02:54,000 --> 00:03:01,000
from the base class FormatErrorMessage, we actually set the error to display string to use

50
00:03:01,000 --> 00:03:03,000
for this attribute and the constructor.

51
00:03:03,000 --> 00:03:05,000
And then back in is valid.

52
00:03:05,000 --> 00:03:08,000
We'll build that string using Display Name.

53
00:03:08,000 --> 00:03:12,000
And that's what ultimately produce the string, User Name has too many words.

54
00:03:12,000 --> 00:03:17,000
It also allows other people to set a custom error message if they want.

55
00:03:17,000 --> 00:03:20,000
You can do this actually on any attribute even the built in attributes.

56
00:03:20,000 --> 00:03:25,000
Anyone of these attributes, I could walk up to them and say, errorMessage equals

57
00:03:25,000 --> 00:03:30,000
and have a custom error message here that will display when the user is outside of that range.

58
00:03:30,000 --> 00:03:36,000
And I could do that for maxWords too just because we're using FormatErrorString

59
00:03:36,000 --> 00:03:40,000
and deriving from a validation attribute base class.

60
00:03:40,000 --> 00:03:43,000
Now, this type of validation only happens on the server-side.

61
00:03:43,000 --> 00:03:49,000
You can implement custom JavaScript code to plug in to the client-side validation framework.

62
00:03:49,000 --> 00:03:52,000
You'll find many examples of this on the web, just remember you don't need

63
00:03:52,000 --> 00:03:55,000
to duplicate all the validation logic on the client.

64
00:03:55,000 --> 00:03:57,000
Some validations are difficult on the client.

65
00:03:57,000 --> 00:04:02,000
If you at least have the required and length attributes and simple text like that,

66
00:04:02,000 --> 00:04:07,000
you can give quick feedback for common errors that's going to help your users out quite a bit.

67
00:04:07,000 --> 00:04:10,000
In addition to this validation attribute approach,

68
00:04:10,000 --> 00:04:18,000
you can also have a model object implement and IValidatable Object Interface.

69
00:04:18,000 --> 00:04:22,000
This is a good approach to use if you want to do a deep inspection of a model

70
00:04:22,000 --> 00:04:28,000
because what I can do with this interface is use control period to tell Visual Studio that I want

71
00:04:28,000 --> 00:04:32,000
to implement this interface and it will give me that validate method.

72
00:04:32,000 --> 00:04:36,000
That's the method that you implement to provide the custom validation logic.

73
00:04:36,000 --> 00:04:39,000
And it's inside of here where you have access to the entire model.

74
00:04:39,000 --> 00:04:44,000
When you write a validation attribute, you only have easy access to a single property,

75
00:04:44,000 --> 00:04:49,000
that's the property value where the attribute I was used and that's the property value

76
00:04:49,000 --> 00:04:51,000
that the model binder will pass in to you.

77
00:04:51,000 --> 00:04:54,000
You can get to other properties on the model but it's a bit messy.

78
00:04:54,000 --> 00:04:59,000
With Validate, I'm inside my model object so it would be really easy for me

79
00:04:59,000 --> 00:05:03,000
to exercise validation logic that looks at multiple properties, for instance,

80
00:05:03,000 --> 00:05:15,000
I could say something like, if Rating is less than two and ReviewerName ToLower,

81
00:05:15,000 --> 00:05:20,000
startsWith Scott and maybe we just have a trouble maker

82
00:05:20,000 --> 00:05:22,000
on the site with the User Name of Scott.

83
00:05:22,000 --> 00:05:24,000
And it gives everyone a bad and low rating.

84
00:05:24,000 --> 00:05:27,000
We just want to prevent him from entering messages.

85
00:05:27,000 --> 00:05:32,000
And what I could do here is use yield return

86
00:05:32,000 --> 00:05:38,000
and create a new ValidationResult with an error message.

87
00:05:38,000 --> 00:05:43,000
And otherwise, if everything succeeds, I don't need to yield return anything here,

88
00:05:43,000 --> 00:05:46,000
that'll essentially produce an empty IEnumerable

89
00:05:46,000 --> 00:05:49,000
and the MVC runtime will know there's no problems.

90
00:05:49,000 --> 00:05:58,000
And now, if I build the application again and we come into edit a review and I have a User Name

91
00:05:58,000 --> 00:06:01,000
of Scott and I tried to put in a Rating of one.

92
00:06:01,000 --> 00:06:03,000
I'll save the error message.

93
00:06:03,000 --> 00:06:07,000
Notice that this error message appears above any properties that's

94
00:06:07,000 --> 00:06:10,000
because we didn't associate this validation error

95
00:06:10,000 --> 00:06:13,000
with a specific property like User Name or Rating.

96
00:06:13,000 --> 00:06:16,000
And in that case, it just gets associated with the model

97
00:06:16,000 --> 00:06:18,000
and it will display in the Validation Summary.

98
00:06:18,000 --> 00:06:25,000
If I open up the Edit view for a Review real quick, that error message is appearing here

99
00:06:25,000 --> 00:06:29,000
in the Validation Summary which by default only shows errors that aren't associated

100
00:06:29,000 --> 00:06:32,000
with a specific field in the model.

101
00:06:32,000 --> 00:06:36,000
That's what the true parameter is telling the Validation Summary to do.

102
00:06:36,000 --> 00:06:41,000
If you change that value over a false value, the Validation Summary will display all errors

103
00:06:41,000 --> 00:59:00,000
on the models for all properties and also the model of all errors.


1
00:00:02,000 --> 00:00:06,000
Thus far in the application we've been accessing the data base and using different queries

2
00:00:06,000 --> 00:00:10,000
to show and search for restaurants on the home page of the application.

3
00:00:10,000 --> 00:00:14,000
I think the next step would be to add the ability to create update,

4
00:00:14,000 --> 00:00:19,000
edit and delete restaurants but I don't think we want this functionality on the home page,

5
00:00:19,000 --> 00:00:22,000
so let's create a new section of the application to do this.

6
00:00:22,000 --> 00:00:27,000
We need a restaurant area that will let us manage restaurants and what I'll do is come

7
00:00:27,000 --> 00:00:30,000
into the layout view of the application

8
00:00:30,000 --> 00:00:39,000
and let's replace the link that's currently pointing towards reviews and instead is going

9
00:00:39,000 --> 00:00:46,000
to say Restaurant is going to go to the index action of the restaurant controller

10
00:00:46,000 --> 00:00:51,000
which means we need a restaurant controller, we don't have a restaurant controller as yet.

11
00:00:51,000 --> 00:00:53,000
So I'm going to right click the controllers folder,

12
00:00:53,000 --> 00:01:00,000
say add a new controller this will be the RestaurantController and I'm going

13
00:01:00,000 --> 00:01:04,000
to select a new template, I'm going to select the template MVC controller

14
00:01:04,000 --> 00:01:08,000
with read/write actions and views using Entity Framework.

15
00:01:08,000 --> 00:01:12,000
Essentially, the visual studio can create your controller and all the views that you need

16
00:01:12,000 --> 00:01:16,000
if you tell-- first of all the model class which in this case will be restaurant,

17
00:01:16,000 --> 00:01:21,000
I can just type the first few words to this and find it in the drop down list

18
00:01:21,000 --> 00:01:26,000
and the data context class which in our case is going to be OdeToFoodDb

19
00:01:26,000 --> 00:01:31,000
and now I'll let visual studio work its magic by just clicking ad and it will go

20
00:01:31,000 --> 00:01:36,000
out it will create that controller, populate all the actions with all the necessary code

21
00:01:36,000 --> 00:01:38,000
to save things and query things from the data base,

22
00:01:38,000 --> 00:01:41,000
also give me all of the views that I need in my views folder.

23
00:01:41,000 --> 00:01:45,000
And when it's done it will open up all these new files in the editor.

24
00:01:45,000 --> 00:01:48,000
So now I can see that I have a restaurant controller.

25
00:01:48,000 --> 00:01:51,000
Let's build the application and try it out.

26
00:01:51,000 --> 00:01:56,000
The build was successful now if I refresh the home page we should have a restaurant link

27
00:01:56,000 --> 00:01:59,000
and if I click that I'll go to the restaurant controller.

28
00:01:59,000 --> 00:02:04,000
And there we can still see all of our restaurants now we're back

29
00:02:04,000 --> 00:02:09,000
in the pre-generated view that shows the restaurants in a table but I should now be able

30
00:02:09,000 --> 00:02:19,000
to read a new restaurant just by typing in a name and I'll give this restaurant a City

31
00:02:19,000 --> 00:02:25,000
and click create, and we now have a new restaurant in the data base.

32
00:02:25,000 --> 00:02:30,000
Let's see if we can edit this because it's actually Yellow Brick Bank Restaurant

33
00:02:30,000 --> 00:02:32,000
and that seems to work.

34
00:02:32,000 --> 00:02:33,000
Can we delete the restaurant?

35
00:02:33,000 --> 00:02:37,000
Yes we can delete the restaurant too.

36
00:02:37,000 --> 00:02:41,000
This was all thanks to the scaffolding that I selected when I created this controller,

37
00:02:41,000 --> 00:02:46,000
it gave me a controller that instantiated an OdeToFoodDb, give me an index action

38
00:02:46,000 --> 00:02:48,000
that will show all the restaurants.

39
00:02:48,000 --> 00:02:52,000
If we go down here to the bottom it also provided the dispose method

40
00:02:52,000 --> 00:02:53,000
to make sure things were cleaned up.

41
00:02:53,000 --> 00:03:00,000
And in between were a number of actions like delete and edit that will save

42
00:03:00,000 --> 00:03:03,000
and create and delete restaurants.

43
00:03:03,000 --> 00:03:07,000
The idea again behind scaffolding is that it gives you a good starting point.

44
00:03:07,000 --> 00:03:12,000
You cannot necessarily write an entire application just by scaffolding everything out.

45
00:03:12,000 --> 00:03:16,000
There's very few applications that are that simple but it does give you a code base

46
00:03:16,000 --> 00:03:20,000
to start working with and shows you some of the basic MVC patterns that we usually follow.

47
00:03:20,000 --> 00:03:24,000
You can certainly go in and change the controller code, you can go in

48
00:03:24,000 --> 00:03:30,000
and change the view code but I'm not going to drill into each of these methods just now

49
00:03:30,000 --> 00:03:33,000
because what's ultimately going to happen is we're going to impellent many

50
00:03:33,000 --> 00:03:36,000
of the same methods in another controller, the reviews controller

51
00:03:36,000 --> 00:03:39,000
so that we can create and edit reviews.

52
00:03:39,000 --> 00:03:41,000
But I will take a minute just to walk you

53
00:03:41,000 --> 00:03:45,000
through one controller action the details action.

54
00:03:45,000 --> 00:03:49,000
The details action is what is invoked when I click on the details link,

55
00:03:49,000 --> 00:03:52,000
it just shows all the details oft the restaurant, not the prettiest UI

56
00:03:52,000 --> 00:03:58,000
so certainly it's something that you'll look at changing but the way the controller works is

57
00:03:58,000 --> 00:04:02,000
to accept an incoming ID parameter that's the restaurant that we have to look up

58
00:04:02,000 --> 00:04:05,000
and then using the restaurants DbSet

59
00:04:05,000 --> 00:04:11,000
on my OdeToFoodDb it will invoke the find method passing in that ID.

60
00:04:11,000 --> 00:04:17,000
Find is one of those convenient methods that the Entity Framework provides when it's EPI,

61
00:04:17,000 --> 00:04:21,000
it's basically saying I'll go out and find something by it's primary key value all you have

62
00:04:21,000 --> 00:04:24,000
to do is give me the primary key value, if it does find that object,

63
00:04:24,000 --> 00:04:26,000
great, and return to a restaurant.

64
00:04:26,000 --> 00:04:31,000
No link queries or link operators or lambda expressions here required.

65
00:04:31,000 --> 00:04:34,000
If it doesn't find that restaurant it will return null,

66
00:04:34,000 --> 00:04:38,000
so one of the things we could do here is check for null, if we didn't find the null

67
00:04:38,000 --> 00:04:43,000
or return HttpNotFound which is another method that will produce a result,

68
00:04:43,000 --> 00:04:47,000
that essentially return to 404 to the browser.

69
00:04:47,000 --> 00:04:53,000
If we were to come in to this application in look for slash restaurant slash 22

70
00:04:53,000 --> 00:04:59,000
where there shouldn't be a restaurant with a 22 in here, so we get the 404 error message

71
00:04:59,000 --> 00:05:01,000
which may or may not be what you want.

72
00:05:01,000 --> 00:05:04,000
If it is uncommon that a user should click a link

73
00:05:04,000 --> 00:05:09,000
for a restaurant it doesn't exist anymore then you might just go ahead and return a 404

74
00:05:09,000 --> 00:05:13,000
but for some reason there's a lot of links out there and you delete a lot of restaurants,

75
00:05:13,000 --> 00:05:19,000
you might consider returning some sort of custom view.

76
00:05:19,000 --> 00:05:24,000
So I could write a view called NotFound.chhtml put into the reviews folder

77
00:05:24,000 --> 00:05:28,000
and basically put a little message there that says, "Sorry, we couldn't find that restaurant"

78
00:05:28,000 --> 00:05:33,000
and maybe provide a link that you can click on to go back and search for other restaurants,

79
00:05:33,000 --> 00:05:38,000
but for now just for turning a NotFound the area is fine, if we do find the restaurant

80
00:05:38,000 --> 00:05:43,000
and of course we'll pass that into the view and it will display

81
00:05:43,000 --> 00:05:46,000
as much restaurant information as possible.

82
00:05:46,000 --> 00:05:55,000
But one thing the details are missing is a list of any reviews that the restaurant might have.

83
00:05:55,000 --> 00:06:01,000
That would be easy enough to add to this details view, I could certainly come down here somewhere

84
00:06:01,000 --> 00:06:05,000
and have a for each statement and look through Model.Reviews and print out some information

85
00:06:05,000 --> 00:06:10,000
about each review or list how many reviews it has or its average rating.

86
00:06:10,000 --> 00:06:15,000
But I thought we could do something that would be a little bit of the beat and path.

87
00:06:15,000 --> 00:06:19,000
I'd like to be able to click on a link here that says reviews and go to the reviews

88
00:06:19,000 --> 00:06:24,000
for the restaurant and then have the ability to add reviews to that restaurant

89
00:06:24,000 --> 00:06:27,000
or edit the existing reviews for that restaurant.

90
00:06:27,000 --> 00:06:32,000
This will be a little bit off the beat and path because the built in scaffolding cannot create

91
00:06:32,000 --> 00:06:36,000
that for me, it can be close but what we'll do is write most of it from scratch

92
00:06:36,000 --> 00:06:38,000
so that we can actually see how some

93
00:06:38,000 --> 00:06:41,000
of these data modification actions need to be implemented.

94
00:06:41,000 --> 00:06:47,000
And along the way we'll be talking about model binding, model validation and learn some more

95
00:06:47,000 --> 00:59:00,000
about how to work with the MVC framework.


1
00:00:02,000 --> 00:00:03,000
What I'd like to do now is show you how

2
00:00:03,000 --> 00:00:06,000
to automatically populate your database with some users and roles.

3
00:00:06,000 --> 00:00:11,000
Having a database with users and roles predefined is nice to have during development

4
00:00:11,000 --> 00:00:15,000
because if you're building an application that restricts access to specific pages based

5
00:00:15,000 --> 00:00:19,000
on the user's role membership then needing to set up those roles when you start

6
00:00:19,000 --> 00:00:21,000
with a fresh project only slows you down.

7
00:00:21,000 --> 00:00:25,000
I'm a big believer in making it easy to get started working on a project.

8
00:00:25,000 --> 00:00:28,000
There're several techniques that you could use to populate the database.

9
00:00:28,000 --> 00:00:31,000
You could, just write SQL statements that insert data

10
00:00:31,000 --> 00:00:33,000
into the membership tables we looked at earlier.

11
00:00:33,000 --> 00:00:37,000
But I want to show you how to do this with the membership API that is given

12
00:00:37,000 --> 00:00:39,000
to us by the SimpleMembershipProvider.

13
00:00:39,000 --> 00:00:42,000
Remember that's one of the components that working behind the layers

14
00:00:42,000 --> 00:00:45,000
of other components in our MVC 4 application.

15
00:00:45,000 --> 00:00:49,000
And since this provider owns the schema, I think it would be more robust

16
00:00:49,000 --> 00:00:52,000
to populate the database using this provider APIs.

17
00:00:52,000 --> 00:00:56,000
The question then is when and where to populate these roles that we need?

18
00:00:56,000 --> 00:01:01,000
We could during the application start up, make sure that the roles exist in the database.

19
00:01:01,000 --> 00:01:05,000
But since we're using entity framework migrations, we can also use the Seed method

20
00:01:05,000 --> 00:01:08,000
of our entity framework migration class.

21
00:01:08,000 --> 00:01:10,000
Remember, that's in the Migrations folder.

22
00:01:10,000 --> 00:01:11,000
It's called Configuration.cs.

23
00:01:11,000 --> 00:01:15,000
This is where we added a thousand restaurants into the database

24
00:01:15,000 --> 00:01:19,000
so we could do some testing in our AJAX module.

25
00:01:19,000 --> 00:01:23,000
So inside of the Seed method, I'll add a call to a new method

26
00:01:23,000 --> 00:01:25,000
that we're going to write called SeedMembership.

27
00:01:25,000 --> 00:01:30,000
I can use Visual Studio to create this method for me if I just hit Ctrl period

28
00:01:30,000 --> 00:01:31,000
and select that option in the drop down.

29
00:01:31,000 --> 00:01:36,000
That will generate a method stub for me down here that I can now fill in.

30
00:01:36,000 --> 00:01:38,000
The first thing we'll do here is use a call

31
00:01:38,000 --> 00:01:43,000
to WebSecurity dot InitializeDatabaseConnection just to make sure that everything is set up

32
00:01:43,000 --> 00:01:46,000
and the schema is in place for the SimpleMembershipProvider.

33
00:01:46,000 --> 00:01:51,000
I do need to bring in a namespace for this, it's WebMatrix.WebData.

34
00:01:51,000 --> 00:01:54,000
We're using the same parameters that we're using during application start

35
00:01:54,000 --> 00:01:56,000
up when we call this method.

36
00:01:56,000 --> 00:02:00,000
It probably would be a good idea to take this two lines of code and put them

37
00:02:00,000 --> 00:02:05,000
in a static method in a class somewhere so that I can call them from both SeedMembership

38
00:02:05,000 --> 00:02:09,000
and also the Global.asax.cs application start event

39
00:02:09,000 --> 00:02:12,000
and not have this hard coded string (inaudible) duplicated everywhere.

40
00:02:12,000 --> 00:02:16,000
But I'll leave that as an exercise for the viewer.

41
00:02:16,000 --> 00:02:21,000
So once the database is set up, I can go out and get access to the current role provider

42
00:02:21,000 --> 00:02:25,000
and the current membership provider by walking up to a property called Provider

43
00:02:25,000 --> 00:02:28,000
on the roles class and the membership class.

44
00:02:28,000 --> 00:02:29,000
These are static properties.

45
00:02:29,000 --> 00:02:31,000
They give you the current provider that's in effect.

46
00:02:31,000 --> 00:02:35,000
I do need to bring a namespace for this to work, System.Web.Security.

47
00:02:35,000 --> 00:02:43,000
But now I have access to two objects that I can use to create users or see if a user exists,

48
00:02:43,000 --> 00:02:47,000
see what roles the user is in, all the good things that you need to do with membership.

49
00:02:47,000 --> 00:02:51,000
So there's not just a single membership provider that does both users and roles.

50
00:02:51,000 --> 00:02:54,000
Those are actually a little more fine-grained than that.

51
00:02:54,000 --> 00:02:57,000
There's a role provider and there's a membership provider.

52
00:02:57,000 --> 00:03:00,000
I just think of them both really as the SimpleMembershipProvider.

53
00:03:00,000 --> 00:03:02,000
And here is the API that we can use with them.

54
00:03:02,000 --> 00:03:05,000
We can walk up to the role provider and say,

55
00:03:05,000 --> 00:03:08,000
"Is there a role called admin., if not create the role."

56
00:03:08,000 --> 00:03:12,000
And then, "Is there a user with user name sallen,

57
00:03:12,000 --> 00:03:15,000
if not create that user and here's the password."

58
00:03:15,000 --> 00:03:19,000
And finally, check to see if sallen is in the admin role, and if not,

59
00:03:19,000 --> 00:03:23,000
add that sallen user to the admin role.

60
00:03:23,000 --> 00:03:27,000
We always want to check if things exist first before we just add them

61
00:03:27,000 --> 00:03:30,000
because remember the Seed method runs every time

62
00:03:30,000 --> 00:03:33,000
that we execute update database in the Package Manager Console.

63
00:03:33,000 --> 00:03:36,000
We'll be doing that many times as we change the schema and change our models

64
00:03:36,000 --> 00:03:40,000
through development, and we wouldn't want this Seed membership method to try

65
00:03:40,000 --> 00:03:43,000
to insert duplicate data that will actually generate an exception.

66
00:03:43,000 --> 00:03:47,000
But with that code in placed, let me come in to the Package Manager Console

67
00:03:47,000 --> 00:03:50,000
and run update database, that will execute the Seed method

68
00:03:50,000 --> 00:03:53,000
and it will have a disappointing result.

69
00:03:53,000 --> 00:03:59,000
And the disappointing result is an exception that has been thrown saying

70
00:03:59,000 --> 00:04:02,000
that the role manager feature has not been enabled.

71
00:04:02,000 --> 00:04:05,000
It took me a bit of time and debugging to figure this out.

72
00:04:05,000 --> 00:04:08,000
But I finally realized that I needed to add some explicit configuration

73
00:04:08,000 --> 00:04:11,000
to the web.config file for this to work.

74
00:04:11,000 --> 00:04:15,000
So the SimpleMembership stuff just works inside of your MVC application.

75
00:04:15,000 --> 00:04:16,000
That's a real web application.

76
00:04:16,000 --> 00:04:21,000
But here when we're running update database, part of the entity framework migrations.

77
00:04:21,000 --> 00:04:24,000
This isn't a web application and it seems to require a little bit

78
00:04:24,000 --> 00:04:27,000
of configuration to get this to work.

79
00:04:27,000 --> 00:04:29,000
So the configuration goes into web.config

80
00:04:29,000 --> 00:04:32,000
because this is the configuration that migrations will use.

81
00:04:32,000 --> 00:04:37,000
It has all the settings that are in place when that migrations process executes.

82
00:04:37,000 --> 00:04:40,000
And the bit of configuration I have to put in here is just

83
00:04:40,000 --> 00:04:45,000
to explicitly configure a role manager which is the simple role provider

84
00:04:45,000 --> 00:04:47,000
and set it to enabled equals true.

85
00:04:47,000 --> 00:04:50,000
And also explicitly configure the SimpleMembershipProvider

86
00:04:50,000 --> 00:04:52,000
as the membership provider.

87
00:04:52,000 --> 00:04:56,000
And just having that bit of config in placed and saving the file,

88
00:04:56,000 --> 00:04:58,000
I should be able to update database again.

89
00:04:58,000 --> 00:05:03,000
And now, we'll have users and roles in the database for sure.

90
00:05:03,000 --> 00:05:05,000
So that worked.

91
00:05:05,000 --> 00:05:08,000
And don't take my word for it that it just works behind the scenes.

92
00:05:08,000 --> 00:05:10,000
Let's actually test it out.

93
00:05:10,000 --> 00:05:14,000
I'm going to remove the Authorize attribute from the HomeController and we'll place it somewhere

94
00:05:14,000 --> 00:05:17,000
where we might actually want some authorization.

95
00:05:17,000 --> 00:05:20,000
So I'll remove that attribute and while I'm at it,

96
00:05:20,000 --> 00:05:23,000
I'll remove this AllowAnonymous attribute from the index method.

97
00:05:23,000 --> 00:05:27,000
It makes no sense if nothing in here is-- needs authorization.

98
00:05:27,000 --> 00:05:31,000
And instead, let's pretend that we only want to allow administrators

99
00:05:31,000 --> 00:05:33,000
to be able to create restaurants.

100
00:05:33,000 --> 00:05:39,000
That means making a change in the restaurant controller.

101
00:05:39,000 --> 00:05:43,000
Specifically, we'll add an Authorize attribute to the create action

102
00:05:43,000 --> 00:05:49,000
and say that this can only be done by users in the admin role.

103
00:05:49,000 --> 00:05:52,000
And putting this on the create action that responds to a post,

104
00:05:52,000 --> 00:05:56,000
we'll make sure that no one can create a restaurant unless they're an admin.

105
00:05:56,000 --> 00:06:00,000
But I will also put it on the create action that responds to a get request,

106
00:06:00,000 --> 00:06:03,000
just to make sure that someone who is not authorized doesn't come in

107
00:06:03,000 --> 00:06:05,000
and try to create restaurant and fill out all the information

108
00:06:05,000 --> 00:06:09,000
and they don't have the proper permissions that would be a disappointment.

109
00:06:09,000 --> 00:06:17,000
Speaking of which, it might also make sense to go into the Index view for restaurant and here

110
00:06:17,000 --> 00:06:22,000
with the Create New restaurant link appears, we might want to make sure

111
00:06:22,000 --> 00:06:25,000
that we only display this link if the user is an admin.

112
00:06:25,000 --> 00:06:30,000
Again, that mean standard users won't click that and get confused when they have to login.

113
00:06:30,000 --> 00:06:35,000
So there's an API for this, just User.IsInRole, the same user property

114
00:06:35,000 --> 00:06:37,000
where we can see User.Identity.Name.

115
00:06:37,000 --> 00:06:42,000
There's also an IsInRole check, you just pass in the name of the role and that will return false

116
00:06:42,000 --> 00:06:45,000
if the user is not an admin and we won't show that link.

117
00:06:45,000 --> 00:06:46,000
Let's try it out.

118
00:06:46,000 --> 00:06:53,000
I'll run the application and we'll come in to look at the list of restaurant.

119
00:06:53,000 --> 00:06:57,000
And since I'm not logged in, I do not see it create new link.

120
00:06:57,000 --> 00:07:03,000
So let me log in and now my database has an admin role.

121
00:07:03,000 --> 00:07:05,000
We've seeded that into the database.

122
00:07:05,000 --> 00:07:07,000
And I put sallen in that role.

123
00:07:07,000 --> 00:07:11,000
So once I logged in and come in to the list of restaurants.

124
00:07:11,000 --> 00:07:13,000
Now, I can see the Create New button.

125
00:07:13,000 --> 00:07:19,000
And if I were to go directly to this Create action as a regular user, so I'll log off

126
00:07:19,000 --> 00:07:26,000
and paste that URL in here, the MVC framework would decide that it needs to authenticate me

127
00:07:26,000 --> 00:07:30,000
in order to see what role I'm in and that's where I could log in.

128
00:07:30,000 --> 00:07:33,000
And I can now get to that Create page.

129
00:07:33,000 --> 00:07:37,000
And I feel like I can sleep well at night now,

130
00:07:37,000 --> 00:07:40,000
knowing that only administrators can create restaurants in the application.

131
00:07:40,000 --> 00:07:45,000
My application is error tight and a malicious user should never be able to get

132
00:07:45,000 --> 00:07:47,000
through this authorization checks.

133
00:07:47,000 --> 00:07:49,000
Or can they?

134
00:07:49,000 --> 00:59:00,000
( Pause )

